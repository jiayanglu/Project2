---
title: "Project2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#shiny::runGitHub("jiayanglu/Project2")
```

Install packages needed in the following code chunks.

```{r}
#options(repos = "https://cloud.r-project.org")

#install.packages(c("shiny", "tidyverse", "jsonlite"))

library(shiny)
library(tidyverse)
library(jsonlite)
```

# openFDA API endpoint for animal drug adverse event

Queries from openFDA API endpoint for animal drug adverse event reports are listed below.

## Reports over time

This is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including adverse reactions, product use errors, and product/manufacturing problems, within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_reports_over_time <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_reports_over_time <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_reports_over_time)
  
  output_API <- fromJSON(full_URL)
  reports_over_time_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(reports_over_time_data$time))
  latest_date <- max(ymd(reports_over_time_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=original_receive_date")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reports_over_time_data <- as_tibble(output_API$results)
    
    reports_over_time_data <- reports_over_time_data |>
      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |>
      select(receivedate_ymd, count)
    
    query_reports_over_time_data <- reports_over_time_data |>
      filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, query_reports_over_time_data),
                    c("earliest_date", "latest_date", query_name)))
  }
}  

animal_API_reports_over_time(19940101,20060101)

```

## Who reports

This is a query about primary reporter who holds or provides the most pertinent information related to the adverse event report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_who_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_who_reports <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_who_reports)

  output_API <- fromJSON(full_URL)
  who_reports_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(who_reports_data$time))
  latest_date <- max(ymd(who_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=primary_reporter.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    who_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, who_reports_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

animal_API_who_reports(20090101, 20190202) 

```

## Types of report

This is a query about the types of adverse events in the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_types_of_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_types_of_reports <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_types_of_reports)

  output_API <- fromJSON(full_URL)
  types_of_reports_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(types_of_reports_data$time))
  latest_date <- max(ymd(types_of_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=type_of_information.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    types_of_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, types_of_reports_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

animal_API_types_of_reports(20090101, 20190202) 

```

## Animal breeds

This is a query about animal breeds in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_animal_breeds <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_animal_breeds <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_animal_breeds)

  output_API <- fromJSON(full_URL)
  animal_breeds_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(animal_breeds_data$time))
  latest_date <- max(ymd(animal_breeds_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=animal.breed.breed_component.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    animal_breeds_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, animal_breeds_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

animal_API_animal_breeds(20110101, 20190202) 

```

## Reactions

This is a query about reactions in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_reactions <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_reactions <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_reactions)

  output_API <- fromJSON(full_URL)
  reactions_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(reactions_data$time))
  latest_date <- max(ymd(reactions_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=reaction.veddra_term_name.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reactions_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, reactions_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

animal_API_reactions(20180101, 20190202) 

```

## Outcomes

This is a query about animal's medical status after treatment within a date range in the openFDA API endpoint for the animal drug adverse event reports.


```{r}

animal_API_outcomes <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_outcomes <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_outcomes)

  output_API <- fromJSON(full_URL)
  outcomes_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(outcomes_data$time))
  latest_date <- max(ymd(outcomes_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=outcome.medical_status.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    outcomes_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, outcomes_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

animal_API_outcomes(20180101, 20190901) 

```

# openFDA API endpoint for adverse drug events

Queries from openFDA API endpoint for adverse drug events are listed below.

## Reports over time

This is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including serious drug side effects, product use errors, product quality problems, and therapeutic failures, within a date range in the openFDA API endpoint for the adverse drug events.

```{r}

drug_API_reports_over_time <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "drug/event.json"
  query_reports_over_time <- "?count=receivedate"
  full_URL <- paste0(base_URL, endpoint, query_reports_over_time)
  
  output_API <- fromJSON(full_URL)
  reports_over_time_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(reports_over_time_data$time))
  latest_date <- max(ymd(reports_over_time_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=receivedate:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=receivedate")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reports_over_time_data <- as_tibble(output_API$results)
    
    reports_over_time_data <- reports_over_time_data |>
      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |>
      select(receivedate_ymd, count)
    
    query_reports_over_time_data <- reports_over_time_data |>
      filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, query_reports_over_time_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

drug_API_reports_over_time(20040101,20160101)

```

## Who reports

This is a query about category of individual who submittd the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

drug_API_who_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "drug/event.json"
  query_who_reports <- "?count=receivedate"
  full_URL <- paste0(base_URL, endpoint, query_who_reports)
  
  output_API <- fromJSON(full_URL)
  who_reports_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(who_reports_data$time))
  latest_date <- max(ymd(who_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=receivedate:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=primarysource.qualification")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    who_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, who_reports_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

# 1: Physician; 2: Pharmacist; 3: Other health professional; 4: Lawyer; 5: Consumer or non-health professional
drug_API_who_reports(20040101, 20240331)

```
