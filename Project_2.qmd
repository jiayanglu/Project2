---
title: "Project2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#shiny::runGitHub("jiayanglu/Project2")
```

Install packages needed in the following code chunks.

```{r}
#options(repos = "https://cloud.r-project.org")

#install.packages(c("shiny", "tidyverse", "jsonlite"))

library(shiny)
library(tidyverse)
library(jsonlite)
```

# openFDA API endpoint for animal drug adverse event

Queries from openFDA API endpoint for animal drug adverse event reports are listed below.

## Reports over time

This is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including adverse reactions, product use errors, and product/manufacturing problems, within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_reports_over_time <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_reports_over_time <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_reports_over_time)
  
  output_API <- fromJSON(full_URL)
  reports_over_time_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(reports_over_time_data$time))
  latest_date <- max(ymd(reports_over_time_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=original_receive_date")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reports_over_time_data <- as_tibble(output_API$results)
    
    reports_over_time_data <- reports_over_time_data |>
      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |>
      select(receivedate_ymd, count) |>
      filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, reports_over_time_data),
                    c("earliest_date", "latest_date", query_name)))
  }
}  

#animal_API_reports_over_time(20150101,20221231)

```

## Who reports

This is a query about primary reporter who holds or provides the most pertinent information related to the adverse event report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_who_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_who_reports <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_who_reports)

  output_API <- fromJSON(full_URL)
  who_reports_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(who_reports_data$time))
  latest_date <- max(ymd(who_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=primary_reporter.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    who_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, who_reports_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

#animal_API_who_reports(20150101, 20221231) 

```

## Types of report

This is a query about the types of adverse events in the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_types_of_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_types_of_reports <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_types_of_reports)

  output_API <- fromJSON(full_URL)
  types_of_reports_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(types_of_reports_data$time))
  latest_date <- max(ymd(types_of_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=type_of_information.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    types_of_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, types_of_reports_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_types_of_reports(20150101, 20221231) 

```

## Animal breeds

This is a query about animal breeds in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_animal_breeds <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_animal_breeds <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_animal_breeds)

  output_API <- fromJSON(full_URL)
  animal_breeds_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(animal_breeds_data$time))
  latest_date <- max(ymd(animal_breeds_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=animal.breed.breed_component.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    animal_breeds_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, animal_breeds_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_animal_breeds(20150101, 20221231) 

```

## Reactions

This is a query about reactions in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_reactions <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_reactions <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_reactions)

  output_API <- fromJSON(full_URL)
  reactions_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(reactions_data$time))
  latest_date <- max(ymd(reactions_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=reaction.veddra_term_name.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reactions_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, reactions_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_reactions(20150101, 20221231) 

```

## Outcomes

This is a query about animal's medical status after treatment within a date range in the openFDA API endpoint for the animal drug adverse event reports.


```{r}

animal_API_outcomes <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_outcomes <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_outcomes)

  output_API <- fromJSON(full_URL)
  outcomes_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(outcomes_data$time))
  latest_date <- max(ymd(outcomes_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=outcome.medical_status.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    outcomes_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, outcomes_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_outcomes(20150101, 20221231) 

```

# openFDA API endpoint for adverse drug events

Queries from openFDA API endpoint for adverse drug events are listed below.

## Reports over time

This is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including serious drug side effects, product use errors, product quality problems, and therapeutic failures, within a date range in the openFDA API endpoint for the adverse drug events.

```{r}

drug_API_reports_over_time <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "drug/event.json"
  query_reports_over_time <- "?count=receivedate"
  full_URL <- paste0(base_URL, endpoint, query_reports_over_time)
  
  output_API <- fromJSON(full_URL)
  reports_over_time_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(reports_over_time_data$time))
  latest_date <- max(ymd(reports_over_time_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=receivedate:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=receivedate")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reports_over_time_data <- as_tibble(output_API$results)
    
    reports_over_time_data <- reports_over_time_data |>
      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |>
      select(receivedate_ymd, count) |>
      filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, reports_over_time_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

#drug_API_reports_over_time(20150101,20221231)

```

## Who reports

This is a query about category of individual who submittd the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

drug_API_who_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "drug/event.json"
  query_who_reports <- "?count=receivedate"
  full_URL <- paste0(base_URL, endpoint, query_who_reports)
  
  output_API <- fromJSON(full_URL)
  who_reports_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(who_reports_data$time))
  latest_date <- max(ymd(who_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=receivedate:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=primarysource.qualification")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    who_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, who_reports_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

# 1: Physician; 2: Pharmacist; 3: Other health professional; 4: Lawyer; 5: Consumer or non-health professional

#drug_API_who_reports(20150101, 20221231)

```

# General query code

This is a universal query code chunk to query from either "animalandveterinary" or "drug" endpoint of openFDA API. There are total 6 different queries to get 6 different types of data from "animalandveterinary" endpoint, which are "Reports over time"(query=1), "Who reports"(query=2), "Types of report"(query=3), "Animal breeds"(query=4), "Reactions"(query=5), and "Outcomes"(query=6). There are total 2 different queries to get 2 different types of data from "drug" endpoint, which are "Reports over time"(query=1), "Who reports"(query=2).


```{r}

endpoint_API_query <- function(endpoint, query, start_date, end_date){
  
  if (!endpoint %in% c("animalandveterinary", "drug")){
    message <- paste0("ERROR: Please choose endpoint 'animalandveterinary' or 'drug'.")
    stop(message)
  }
  
  base_URL <- "https://api.fda.gov/"
  event <- "/event.json"
  count <- "?count="
  receive_date <- if (endpoint == "drug") "receivedate" else "original_receive_date"
  full_URL <- paste0(base_URL, endpoint, event, count, receive_date)
  
  output_API <- fromJSON(full_URL)
  receivedate_data <- as_tibble(output_API$results)  
  
  earliest_date <- min(ymd(receivedate_data$time))
  latest_date <- max(ymd(receivedate_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    if (endpoint == "animalandveterinary"){
      
      if (!query %in% c(1,2,3,4,5,6)){
        message <- paste0("ERROR: Please choose query from 1 to 6.")
        stop(message)
      } else if (query == 1){
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", receive_date)
      } else if (query == 2){
        query_code <- "primary_reporter.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 3){
        query_code <- "type_of_information.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 4){
        query_code <- "animal.breed.breed_component.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 5){
        query_code <- "reaction.veddra_term_name.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 6){
        query_code <- "outcome.medical_status.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      }
    } else if (endpoint == "drug"){
      
      if(!query %in% c(1,2)){
        message <- paste0("ERROR: Please choose query from 1 to 2.")
        stop(message)
      } else if (query == 1){
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", receive_date)
      } else if (query == 2){
        query_code <- "primarysource.qualification"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      }
    }
    
    search <- "?search="
    full_URL <- paste0(base_URL, endpoint, event, search, receive_date, query_date_range)
    
    output_API <- fromJSON(full_URL)
    query_data <- as_tibble(output_API$results)
    
    if (query == 1){
      
      query_data <- query_data |>
        mutate(receivedate_ymd = ymd(query_data$time)) |>
        select(receivedate_ymd, count) |>
        filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    } 
    
    query_name <- paste0("query_", endpoint, "_", query, "_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, query_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

# endpoint_API_query("animalandveterinary",1,20150101,20221231)
# endpoint_API_query("animalandveterinary",2,20150101,20221231)
# endpoint_API_query("animalandveterinary",3,20150101,20221231)
# endpoint_API_query("animalandveterinary",4,20150101,20221231)
# endpoint_API_query("animalandveterinary",5,20150101,20221231)
# endpoint_API_query("animalandveterinary",6,20150101,20221231)
# 
# endpoint_API_query("drug",1,20150101,20221231)
# endpoint_API_query("drug",2,20150101,20221231)
```

# Summarize the data

## Contingency tables for "Who reports" queries

### from openFDA API "animalandveterinary" endpoint

Below is the "Who reports" contingency table from 2022-01-01 to 2023-01-01 queried from openFDA API "animalandveterinary" endpoint.

```{r}

fun_contingency_table1 <- function(start_date, end_date){
  
  who_reports_animal <- endpoint_API_query("animalandveterinary",2,start_date,end_date)
  
  who_reports_animal <- who_reports_animal[[3]] |>
    rename(primarysource = term)
  
  print_tibble_with_title <- function(tbl, title) {
    cat(title, "\n")
    print(tbl)
  }
  
  print_tibble_with_title(who_reports_animal, paste0("<Who reports> Contingency Table: Primary Sources of Adverse Events Report from ", start_date, " to ", end_date, " queried from openFDA <animalandveterinary> endpoint."))
  
}

start_date <- 20150101  
end_date <- 20221231

fun_contingency_table1(start_date, end_date)

```

### from openFDA API "drug" endpoint

Below is the "Who reports" contingency table from 2022-01-01 to 2023-01-01 queried from openFDA API "drug" endpoint. The meanings of the values of variable term in the original output: 1 represents "Physician", 2 represents "Pharmacist", 3 represents "Other health professional", 4 represents "Lawyer", 5 represents "Consumer or non-health". I replaced these number values with their corresponding meanings in the final contingency table and added a title corresponding to the queried date range. 

```{r}

fun_contingency_table2 <- function(start_date,end_date){
  
  who_reports_drug <- endpoint_API_query("drug",2,start_date,end_date)
  
  who_reports_drug <- who_reports_drug[[3]] |>
    mutate(primarysource = as.character(term)) |>
    mutate(primarysource = case_when(
      term == 1 ~ "Physician",
      term == 2 ~ "Pharmacist",
      term == 3 ~ "Other health professional",
      term == 4 ~ "Lawyer",
      term == 5 ~ "Consumer or non-health",
      TRUE ~ as.character(primarysource)
    )) |>
    select(primarysource, count)
  
  print_tibble_with_title <- function(tbl, title) {
    cat(title, "\n")
    print(tbl)
  }
  
  print_tibble_with_title(who_reports_drug, paste0("<Who reports> Contingency Table: Primary Sources of Adverse Events Report from ", start_date, " to ", end_date, " queried from openFDA <drug> endpoint."))
  
}

start_date <- 20150101  
end_date <- 20221231 

fun_contingency_table2(start_date, end_date)

```

## Numerical summaries 

### for "Type of Report" queries

This is the "Type of Report" numerical summaries for percentages of the types of adverse events across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint.

```{r}

fun_summary1 <- function(start_date, end_date){
  
  start_year <- substr(start_date, 1, 4)
  end_year <- substr(end_date, 1, 4)
  
  for(i in start_year:end_year){
    
    start_date2 <- as.numeric(paste0(i, "0101"))
    end_date2 <- as.numeric(paste0(i, "1231"))
    
    type_of_report_animal <- endpoint_API_query("animalandveterinary",3,start_date2,end_date2)
    
    type_of_report_animal <- type_of_report_animal[[3]] |>
      rename(reaction = term) |>
      mutate(percentage = count / sum(count) * 100) |>
      select(reaction, percentage, count)
    
    assign(paste0("type_of_report_animal_", i), type_of_report_animal)
    
  }
  
  data_frames <- mget(paste0("type_of_report_animal_", start_year:end_year))
  
  type_of_report_animal_year_range <- bind_rows(data_frames, .id = "source_year") 
  
  type_of_report_animal_year_range_stat <- type_of_report_animal_year_range |>
    group_by(reaction) |>
    summarize(
      across(percentage, .fns = list(
        "mean" = mean,
        "median" = median,
        "var" = var,
        "sd" = sd,
        "IQR" = IQR
      ), .names = "{.fn}_{.col}"))
  
  name <- paste0("Summary statistics for percentage of types of adverse events from ", start_date, " to ", end_date, " queried from openFDA <animalandveterinary> endpoint." )
  
  knitr::kable(type_of_report_animal_year_range_stat, 
               caption= name,
               digits=2)
  
}

start_date <- 20150101  
end_date <- 20221231

fun_summary1(start_date, end_date)

```

### for "Outcomes" queries

This is the "Outcomes" numerical summaries for percentages of medical status outcomes across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint.

```{r}

fun_summary2 <- function(start_date, end_date){
  
  start_year <- substr(start_date, 1, 4)
  end_year <- substr(end_date, 1, 4)
  
  for(i in start_year:end_year){
    
    start_date2 <- as.numeric(paste0(i, "0101"))
    end_date2 <- as.numeric(paste0(i, "1231"))
    outcomes_animal <- endpoint_API_query("animalandveterinary",6,start_date2,end_date2)
    
    outcomes_animal <- outcomes_animal[[3]] |>
      rename(medical.status.outcome = term) |>
      mutate(percentage = count / sum(count) * 100) |>
      select(medical.status.outcome, percentage, count)
    
    assign(paste0("outcomes_animal_", i), outcomes_animal)
    
  }
  
  data_frames <- mget(paste0("outcomes_animal_", start_year:end_year))
  
  outcomes_animal_year_range <- bind_rows(data_frames, .id = "source_year")
  
  outcomes_animal_year_range_stat <- outcomes_animal_year_range |>
    group_by(medical.status.outcome) |>
    summarize(
      across(percentage, .fns = list(
        "mean" = mean,
        "median" = median,
        "var" = var,
        "sd" = sd,
        "IQR" = IQR
      ), .names = "{.fn}_{.col}"))
  
  name <- paste0("Summary statistics for percentage by medical status outcome from ", start_date, " to ", end_date, " queried from openFDA <animalandveterinary> endpoint." )
  
  knitr::kable(outcomes_animal_year_range_stat, 
               caption= name,
               digits=2)
  
}

start_date <- 20150101  
end_date <- 20221231

fun_summary2(start_date, end_date)

```

# Plots

## Plot 1

Based on the "Reports over time" query for how many adverse reports regarding to any undesirable experience associated with the use of an animal drug, including adverse reactions, product use errors, and product/manufacturing problems, across 8 years (2015-2022) in the openFDA API endpoint for the animal drug adverse event reports, we can visualize it with bar plot. User can also select a specific year within 2015-2022, and then visualize the counts by each month with bar plot.

```{r}

fun_plot1_1 <- function(endpoint, start_date, end_date){
  
  reports_over_time_animal  <- endpoint_API_query(endpoint,1,start_date,end_date)[[3]] 
  
  reports_over_time_animal_year  <- reports_over_time_animal |>
    group_by(year = lubridate::year(receivedate_ymd)) |>
    summarise(count = sum(count)) |>
    mutate(year = as.character(year))
  
  reports_over_time_animal_month <- reports_over_time_animal |>
    group_by(year = year(receivedate_ymd), month = month(receivedate_ymd, label = TRUE)) |> 
    summarise(count = sum(count)) 
  
  reports_over_time_animal_plot <- reports_over_time_animal_month |>
    mutate(year = as.character(year))
  
  plot1_1 <- ggplot(reports_over_time_animal_year, aes(year, count)) +
    geom_bar(stat = "identity", fill = "skyblue", width = 0.5) + 
    # Bar plot
    labs(x = "Year", y = "Counts") +
    ggtitle(paste0("Counts of Received Adverse events Reports from ", start_date, " to ", end_date, ".")) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  return(plot1_1)
}

endpoint <- "drug"
start_date <- 20150101
end_date <- 20221231

fun_plot1_1(endpoint, start_date, end_date)

fun_plot1_2 <- function(endpoint, start_date, end_date, input_year){
  
  reports_over_time_animal  <- endpoint_API_query(endpoint,1,start_date,end_date)[[3]] 
  
  reports_over_time_animal_year  <- reports_over_time_animal |>
    group_by(year = lubridate::year(receivedate_ymd)) |>
    summarise(count = sum(count)) |>
    mutate(year = as.character(year))
  
  reports_over_time_animal_month <- reports_over_time_animal |>
    group_by(year = year(receivedate_ymd), month = month(receivedate_ymd, label = TRUE)) |> 
    summarise(count = sum(count))
  
  reports_over_time_animal_stat <- reports_over_time_animal_month |>
    filter(year == input_year) |>
    mutate(year = as.character(year))
  
  plot1_2 <- ggplot(reports_over_time_animal_stat, aes(month, count)) +
    geom_bar(stat = "identity", position = "dodge", fill = "skyblue") + 
    # Bar plot
    labs(x = "Month", y = "Counts") +
    ggtitle(paste0("Counts of Received Adverse events Reports ", "in ", input_year, ".")) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  plot1_2
  
}

endpoint <- "animalandveterinary"
start_date <- 20150101
end_date <- 20221231
input_year <- 2019

year(ymd(start_date))

fun_plot1_2(endpoint, start_date, end_date, input_year)

```

## Plot 2

Based on the "Who reports" query for primary reporter who holds or provides the most pertinent information related to the adverse event report across 8 years (2015-2022) in the openFDA API endpoint for the animal drug adverse event reports, we can visualize the percentages and the counts from each category with an interactive pie chart.

```{r}

fun_plot2 <- function(endpoint, start_date, end_date){
  if (endpoint == "animalandveterinary"){
    
    who_reports <- endpoint_API_query("animalandveterinary",2,start_date,end_date)[[3]] |>
      rename(primarysource = term) |>
      mutate(percentage = count / sum(count) * 100) |>
      select(primarysource, percentage, count)
    
  } else if (endpoint == "drug"){
    
    who_reports <- endpoint_API_query("drug",2,start_date,end_date)[[3]] |>
      mutate(primarysource = as.character(term)) |>
      mutate(primarysource = case_when(
        term == 1 ~ "Physician",
        term == 2 ~ "Pharmacist",
        term == 3 ~ "Other health professional",
        term == 4 ~ "Lawyer",
        term == 5 ~ "Consumer or non-health",
        TRUE ~ as.character(primarysource)
      )) |>
      select(primarysource, count) |>
      mutate(percentage = count / sum(count) * 100) |>
      select(primarysource, percentage, count)
  }
 
   # plot2 <- ggplot(who_reports, aes(x = "", y = percentage, fill = primarysource)) +
   #  geom_bar(stat = "identity", width = 1, color = "white") +
   #   coord_polar("y", start = 0) +
   #  labs(title = paste0("Primary Sources of Adverse Events Report from ", start_date, " to ", end_date),
   #       x = NULL, y = NULL) +
   #  scale_fill_discrete(name = "Primary Source") +
   #  theme_void() +
   #  theme(plot.title = element_text(hjust = 0.5, size = 14),
   #        legend.position = "right",
   #        legend.text = element_text(size = 8),
   #        legend.title = element_text(size = 10))
  
  plot2 <- plotly::plot_ly(who_reports, labels = ~primarysource, values = ~count, type = 'pie',
                           textinfo = 'label+percent+value',
                           hoverinfo = 'text',
                           text = ~paste(primarysource, "<br>", "Count: ", count, "<br>", "Percentage: ", round(percentage, 2), "%"),
                           
                           textfont = list(size = 8)) |>
    plotly::layout(title = list(text = paste0("Primary Sources of Adverse Events Report from ", start_date, " to ", end_date),
                        font = list(size = 12)))
  
  # Display the plot.
  return(list(data = who_reports, plot = plot2))
}

endpoint <- "drug"
start_date <- 20150101  
end_date <- 20221231

fun_plot2(endpoint, start_date, end_date)$plot

```

## Plot 3

Based on the "Type of Report" numerical summaries for percentages of the types of adverse events across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint, the distributions of percentages seem very different among different types of reports. Let’s visualize the distributions with boxplot.

```{r}

fun_plot3 <- function(endpoint, start_date, end_date){
  
  start_year <- substr(start_date, 1, 4)
  end_year <- substr(end_date, 1, 4)
  
  for(i in start_year:end_year){
    
    start_date2 <- as.numeric(paste0(i, "0101"))
    end_date2 <- as.numeric(paste0(i, "1231"))
    
    type_of_report_animal <- endpoint_API_query(endpoint,3,start_date2,end_date2)
    
    type_of_report_animal <- type_of_report_animal[[3]] |>
      rename(reaction = term) |>
      mutate(percentage = count / sum(count) * 100) |>
      select(reaction, percentage, count)
    
    assign(paste0("type_of_report_animal_", i), type_of_report_animal)
    
  }
  
  data_frames <- mget(paste0("type_of_report_animal_", start_year:end_year))
  type_of_report_animal_year_range <- bind_rows(data_frames, .id = "source_year") 
  
  plot3 <- ggplot(type_of_report_animal_year_range, 
                  aes(reaction,
                      percentage,
                      color=reaction)) +
    # Add the box plot layer.
    geom_boxplot() + 
    # Jitter the points to add a little more info to the boxplot.
    geom_jitter() + 
    # Add labels to the axes.
    scale_x_discrete(name = "Reaction", labels = LETTERS[1:11]) + 
    scale_y_continuous("Percentage%") +
    scale_color_discrete("Reaction") +
    # Add a title.
    ggtitle(paste0("Percentage of Types of Adverse Events from ", start_date, " to ", end_date)) +
    # Remove the legend because it isn't needed.
    theme(legend.position = "right",
          legend.text = element_text(size = 7),
          legend.title = element_text(size = 8),
          plot.title = element_text(size = 11),
          axis.text.x = element_text(size = 8),
          axis.text.y = element_text(size = 8)) 
  
  # Display the plot.
  plot3
  
}

endpoint <- "animalandveterinary"
start_date <- 20150101  
end_date <- 20221231

fun_plot3(endpoint, start_date, end_date)

```

## Plot 4

Based on the "Outcomes" numerical summaries for percentages of medical status outcomes across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint, the distributions of percentage seem very different among different outcomes. Let’s visualize the distributions with dot plot.

```{r}

fun_plot4 <- function(endpoint, start_date, end_date){
  
  start_year <- substr(start_date, 1, 4)
  end_year <- substr(end_date, 1, 4)
  
  for(i in start_year:end_year){
    
    start_date2 <- as.numeric(paste0(i, "0101"))
    end_date2 <- as.numeric(paste0(i, "1231"))
    outcomes_animal <- endpoint_API_query(endpoint,6,start_date2,end_date2)
    
    outcomes_animal <- outcomes_animal[[3]] |>
      rename(medical.status.outcome = term) |>
      mutate(percentage = count / sum(count) * 100) |>
      select(medical.status.outcome, percentage, count)
    
    assign(paste0("outcomes_animal_", i), outcomes_animal)
    
  }
  
  data_frames <- mget(paste0("outcomes_animal_", start_year:end_year))
  outcomes_animal_year_range <- bind_rows(data_frames, .id = "source_year")
  
  plot4 <- ggplot(outcomes_animal_year_range, 
                  aes(medical.status.outcome,
                      percentage,
                      color=medical.status.outcome
                  )) +
    # Add the box plot layer.
    geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 1.5) + 
    # Jitter the points to add a little more info to the boxplot.
    geom_jitter() + 
    # Add labels to the axes.
    scale_x_discrete(name = "Medical Status Outcome", labels = LETTERS[1:6]) + 
    scale_y_continuous("Percentage%") +
    scale_color_discrete("Outcomes") +
    # Add a title.
    ggtitle(paste0("Percentage of Medical Status Outcomes after Treatment from ", start_date, " to ", end_date)) + 
    # Remove the legend because it isn't needed.
    theme(legend.position = "right",
          #        legend.position=c(0.85, 0.3),
          legend.text = element_text(size = 7),
          legend.title = element_text(size = 8),
          plot.title = element_text(size = 11),
          axis.text.x = element_text(size = 8),
          axis.text.y = element_text(size = 8)) 
  # Display the plot.
  plot4
  
}

endpoint <- "animalandveterinary"
start_date <- 20150101  
end_date <- 20221231

fun_plot4(endpoint, start_date, end_date)
```

#Wrapper function for plots

```{r}

# fun_wrapper_plot <- function(endpoint, summary, type_of_data, start_date, end_date, input_year){
#   if (endpoint == "animalandveterinary"){
#     if (type_of_data == "Reports over time"){
#       fun_plot1(endpoint, summary, start_date, end_date, input_year)
#     } else if (type_of_data == "Who reports") {
#       fun_plot2(endpoint, start_date, end_date)
#     } else if (type_of_data == "Types of report"){
#       fun_plot3(start_date, end_date)
#     } else if (type_of_data == "Outcomes"){
#       fun_plot4(start_date, end_date)
#     }
#   } else if (endpoint == "drug"){
#     if (type_of_data == "Reports over time"){
#       fun_plot1(endpoint, summary, start_date, end_date, input_year)
#     } else if (type_of_data == "Who reports") {
#       fun_plot2(endpoint, start_date, end_date)
#     } else {
#       message <- paste0("ERROR: This type of data is not aviable from this endpoint.")
#       stop(message)
#     }
#   }
# }
# 
# endpoint <- "drug"
# type_of_data <- "Reports over time"
# summary <- "Monthly Summary"
# start_date <- 20150101
# end_date <- 20221231
# input_year <- 2019
# 
# fun_wrapper_plot(endpoint, summary, type_of_data, start_date, end_date, input_year)

```

# Shiny app

##fun_plot

```{r}
library(shiny)
library(plotly)

ui <- fluidPage(
  titlePanel("Adverse Events Reports Analysis"),
  
  sidebarLayout(
    sidebarPanel(
      h2("Data Download"),
      selectInput("endpoint", "Endpoint:", 
                  choices = c("animalandveterinary", "drug"),
                  selected = "animalandveterinary"),
      dateInput("start_date", "Start Date:", value = "2020-01-01"),
      dateInput("end_date", "End Date:", value = "2022-12-31"),
      selectInput("type_of_data", "Select Type of Data:",
                  choices = c("Reports over time", "Who reports", "Types of report", "Outcomes")),
      actionButton("query_button", "Query API"),
      hr(),
      h2("Data Exploration"),
      conditionalPanel(
        condition = "input.type_of_data == 'Reports over time'",
        radioButtons("summary", "Summary Type:",
                     choices = c("Yearly Summary", "Monthly Summary"))
      ),
      conditionalPanel(
        condition = "input.type_of_data == 'Reports over time' && input.summary == 'Monthly Summary'",
        selectInput("input_year", "Select Year:", choices = NULL)
      )
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Reports over time", plotOutput("plot_reports_over_time")),
        tabPanel("Who reports", plotlyOutput("plot_who_reports")),
        tabPanel("Types of report", plotOutput("plot_types_of_report")),
        tabPanel("Outcomes", plotOutput("plot_outcomes")),
        tabPanel("Data Download",
                 tableOutput("download_data_table"),
                 downloadButton("download_subset", "Download Subset Data"))  
      )
    )
  )
)


# Define server logic
server <- function(input, output, session) {
  # Query API and display data table
  query_data <- reactive({
    req(input$query_button)
    
    endpoint <- input$endpoint
    start_date <- input$start_date
    end_date <- input$end_date
    type_of_data <- input$type_of_data
    summary <- input$summary
    input_year <- input$input_year
    
    if (type_of_data == "Reports over time" & summary == "Yearly Summary") {
      data <- fun_plot1_1(endpoint, start_date, end_date)$data
    } else if (type_of_data == "Reports over time" & summary == "Monthly Summary"){
      data <- fun_plot1_2(endpoint, start_date, end_date, input_year)$data
    } else if (type_of_data == "Who reports"){
      data <- fun_plot2(endpoint, start_date, end_date)$data
    } else if (type_of_data == "Types of report"){
      data <- fun_plot3(endpoint, start_date, end_date)$data
    } else if (type_of_data == "Outcomes"){
      data <-fun_plot4(endpoint, start_date, end_date)$data
    }
    
    return(data)
  })
  
  output$download_data_table <- renderTable({
    query_data()
  })
    
  # Subset data and download as CSV
  output$download_subset <- downloadHandler(
    filename = function() {
      paste("subset_data_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(query_data(), file, row.names = FALSE)
    }
  )
  
  # Generate plot based on user selection
  output$plot_reports_over_time <- renderPlot({
    req(input$type_of_data, input$summary)
    
    if (input$type_of_data == "Reports over time" & input$summary == "Yearly Summary") {
      plot <- fun_plot1_1(input$endpoint, input$start_date, input$end_date)
    } else if (type_of_data == "Reports over time" & summary == "Monthly Summary"){
      plot <- fun_plot1_2(input$endpoint, input$start_date, input$end_date, input$input_year)
    } 
    
    return(plot)
  })
  
    output$plot_who_reports <- renderPlotly({
    req(input$type_of_data)
    
    if (input$type_of_data == "Who reports") {
      plot <- fun_plot2(input$endpoint, input$start_date, input$end_date)$plot
    } 
    
    return(plotly::plotly_build(plot))
  })
    
    output$plot_types_of_report  <- renderPlot({
      req(input$type_of_data)
      
      if (input$type_of_data == "Types of report") {
        plot <- fun_plot3(input$endpoint, input$start_date, input$end_date)
      } 
      
      return(plot)
    })
    
    output$plot_outcomes <- renderPlot({
      req(input$type_of_data)
      
      if (input$type_of_data == "Outcomes") {
        plot <- fun_plot4(input$endpoint, input$start_date, input$end_date)
      } 
      
      return(plot)
    })
    
  #Update year choices based on data available
  observe({
    req(input$type_of_data, input$summary)
    
    if (input$type_of_data == "Reports over time" && input$summary == "Monthly Summary") {
      data <- query_data()
      
      #  years <- unique(year(data$year))
      years <- year(ymd(input$start_date)):year(ymd(input$end_date))
      
      updateSelectInput(session, "input_year", choices = years)
    } else {
      updateSelectInput(session, "input_year", choices = NULL)
    }
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```

