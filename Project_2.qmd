---
title: "Project2"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#shiny::runGitHub("jiayanglu/Project2")
```

Install packages needed in the following code chunks.

```{r}
#options(repos = "https://cloud.r-project.org")

#install.packages(c("shiny", "tidyverse", "jsonlite"))

library(shiny)
library(tidyverse)
library(jsonlite)
```

# openFDA API endpoint for animal drug adverse event

Queries from openFDA API endpoint for animal drug adverse event reports are listed below.

## Reports over time

This is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including adverse reactions, product use errors, and product/manufacturing problems, within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_reports_over_time <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_reports_over_time <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_reports_over_time)
  
  output_API <- fromJSON(full_URL)
  reports_over_time_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(reports_over_time_data$time))
  latest_date <- max(ymd(reports_over_time_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=original_receive_date")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reports_over_time_data <- as_tibble(output_API$results)
    
    reports_over_time_data <- reports_over_time_data |>
      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |>
      select(receivedate_ymd, count) |>
      filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, reports_over_time_data),
                    c("earliest_date", "latest_date", query_name)))
  }
}  

#animal_API_reports_over_time(19940101,20060101)

```

## Who reports

This is a query about primary reporter who holds or provides the most pertinent information related to the adverse event report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_who_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_who_reports <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_who_reports)

  output_API <- fromJSON(full_URL)
  who_reports_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(who_reports_data$time))
  latest_date <- max(ymd(who_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=primary_reporter.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    who_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, who_reports_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

#animal_API_who_reports(20090101, 20190202) 

```

## Types of report

This is a query about the types of adverse events in the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_types_of_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_types_of_reports <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_types_of_reports)

  output_API <- fromJSON(full_URL)
  types_of_reports_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(types_of_reports_data$time))
  latest_date <- max(ymd(types_of_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=type_of_information.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    types_of_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, types_of_reports_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_types_of_reports(20090101, 20190202) 

```

## Animal breeds

This is a query about animal breeds in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_animal_breeds <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_animal_breeds <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_animal_breeds)

  output_API <- fromJSON(full_URL)
  animal_breeds_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(animal_breeds_data$time))
  latest_date <- max(ymd(animal_breeds_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=animal.breed.breed_component.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    animal_breeds_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, animal_breeds_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_animal_breeds(20110101, 20190202) 

```

## Reactions

This is a query about reactions in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

animal_API_reactions <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_reactions <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_reactions)

  output_API <- fromJSON(full_URL)
  reactions_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(reactions_data$time))
  latest_date <- max(ymd(reactions_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=reaction.veddra_term_name.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reactions_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, reactions_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_reactions(20180101, 20190202) 

```

## Outcomes

This is a query about animal's medical status after treatment within a date range in the openFDA API endpoint for the animal drug adverse event reports.


```{r}

animal_API_outcomes <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "animalandveterinary/event.json"
  query_outcomes <- "?count=original_receive_date"
  full_URL <- paste0(base_URL, endpoint, query_outcomes)

  output_API <- fromJSON(full_URL)
  outcomes_data <- as_tibble(output_API$results)

  earliest_date <- min(ymd(outcomes_data$time))
  latest_date <- max(ymd(outcomes_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){

    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)

  } else {
    
    query_receivedate <- "?search=original_receive_date:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=outcome.medical_status.exact")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    outcomes_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, outcomes_data),
                    c("earliest_date", "latest_date", query_name)))

  }
}  

#animal_API_outcomes(20180101, 20190901) 

```

# openFDA API endpoint for adverse drug events

Queries from openFDA API endpoint for adverse drug events are listed below.

## Reports over time

This is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including serious drug side effects, product use errors, product quality problems, and therapeutic failures, within a date range in the openFDA API endpoint for the adverse drug events.

```{r}

drug_API_reports_over_time <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "drug/event.json"
  query_reports_over_time <- "?count=receivedate"
  full_URL <- paste0(base_URL, endpoint, query_reports_over_time)
  
  output_API <- fromJSON(full_URL)
  reports_over_time_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(reports_over_time_data$time))
  latest_date <- max(ymd(reports_over_time_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=receivedate:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=receivedate")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    reports_over_time_data <- as_tibble(output_API$results)
    
    reports_over_time_data <- reports_over_time_data |>
      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |>
      select(receivedate_ymd, count) |>
      filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, reports_over_time_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

#drug_API_reports_over_time(20040101,20160101)

```

## Who reports

This is a query about category of individual who submittd the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.

```{r}

drug_API_who_reports <- function(start_date, end_date){
  
  base_URL <- "https://api.fda.gov/"
  endpoint <- "drug/event.json"
  query_who_reports <- "?count=receivedate"
  full_URL <- paste0(base_URL, endpoint, query_who_reports)
  
  output_API <- fromJSON(full_URL)
  who_reports_data <- as_tibble(output_API$results)
  
  earliest_date <- min(ymd(who_reports_data$time))
  latest_date <- max(ymd(who_reports_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    query_receivedate <- "?search=receivedate:"
    query_date_range <- paste0("[", start_date, "+TO+", end_date, "]&count=primarysource.qualification")
    full_URL <- paste0(base_URL, endpoint, query_receivedate, query_date_range)
    
    output_API <- fromJSON(full_URL)
    who_reports_data <- as_tibble(output_API$results)
    
    query_name <- paste0("query_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, who_reports_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

# 1: Physician; 2: Pharmacist; 3: Other health professional; 4: Lawyer; 5: Consumer or non-health professional
#drug_API_who_reports(20040101, 20240331)

```

# General query code

This is a universal query code chunk to query from either "animalandveterinary" or "drug" in openFDA API endpoint. There are total 6 different queries to get 6 different types of data from "animalandveterinary" endpoint, which are "Reports over time"(query=1), "Who reports"(query=2), "Types of report"(query=3), "Animal breeds"(query=4), "Reactions"(query=5), and "Outcomes"(query=6). There are total 2 different queries to get 2 different types of data from "drug" endpoint, which are "Reports over time"(query=1), "Who reports"(query=2).


```{r}

endpoint_API_query <- function(endpoint, query, start_date, end_date){
  
  if (!endpoint %in% c("animalandveterinary", "drug")){
    message <- paste0("ERROR: Please choose endpoint 'animalandveterinary' or 'drug'.")
    stop(message)
  }
  
  base_URL <- "https://api.fda.gov/"
  event <- "/event.json"
  count <- "?count="
  receive_date <- if (endpoint == "drug") "receivedate" else "original_receive_date"
  full_URL <- paste0(base_URL, endpoint, event, count, receive_date)
  
  output_API <- fromJSON(full_URL)
  receivedate_data <- as_tibble(output_API$results)  
  
  earliest_date <- min(ymd(receivedate_data$time))
  latest_date <- max(ymd(receivedate_data$time))
  
  if (ymd(start_date) < earliest_date | ymd(end_date) > latest_date){
    
    message <- paste0("ERROR: Please pass a date between ", earliest_date, " and ", latest_date, " in the format of YYYYMMDD", ".")
    stop(message)
    
  } else {
    
    if (endpoint == "animalandveterinary"){
      
      if (!query %in% c(1,2,3,4,5,6)){
        message <- paste0("ERROR: Please choose query from 1 to 6.")
        stop(message)
      } else if (query == 1){
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", receive_date)
      } else if (query == 2){
        query_code <- "primary_reporter.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 3){
        query_code <- "type_of_information.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 4){
        query_code <- "animal.breed.breed_component.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 5){
        query_code <- "reaction.veddra_term_name.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      } else if (query == 6){
        query_code <- "outcome.medical_status.exact"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      }
    } else if (endpoint == "drug"){
      
      if(!query %in% c(1,2)){
        message <- paste0("ERROR: Please choose query from 1 to 2.")
        stop(message)
      } else if (query == 1){
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", receive_date)
      } else if (query == 2){
        query_code <- "primarysource.qualification"
        query_date_range <- paste0(":[", start_date, "+TO+", end_date, "]&count=", query_code)
      }
    }
    
    search <- "?search="
    full_URL <- paste0(base_URL, endpoint, event, search, receive_date, query_date_range)
    
    output_API <- fromJSON(full_URL)
    query_data <- as_tibble(output_API$results)
    
    if (query == 1){
      
      query_data <- query_data |>
        mutate(receivedate_ymd = ymd(query_data$time)) |>
        select(receivedate_ymd, count) |>
        filter(receivedate_ymd >= ymd(start_date) & receivedate_ymd <= ymd(end_date))
    } 
    
    query_name <- paste0("query_", endpoint, "_", query, "_", start_date, "_to_", end_date)
    return(setNames(list(earliest_date, latest_date, query_data),
                    c("earliest_date", "latest_date", query_name)))
    
  }
}  

# endpoint_API_query("animalandveterinary",1,20000101,20120101)
# endpoint_API_query("animalandveterinary",2,20000101,20120101)
# endpoint_API_query("animalandveterinary",3,20000101,20120101)
# endpoint_API_query("animalandveterinary",4,20000101,20120101)
# endpoint_API_query("animalandveterinary",5,20000101,20120101)
# endpoint_API_query("animalandveterinary",6,20000101,20120101)
# 
# endpoint_API_query("drug",1,20000101,20120101)
# endpoint_API_query("drug",2,20000101,20120101)

```

# Summarize the data

## "Who reports" Contingency tables

### openFDA API "animalandveterinary" endpoint

Below is the "Who reports" contingency table from 2022-01-01 to 2023-01-01 queried from openFDA API "animalandveterinary" endpoint.

```{r}

start_date <- 20220101  
end_date <- 20230101
who_reports_animal <- endpoint_API_query("animalandveterinary",2,start_date,end_date)

who_reports_animal <- who_reports_animal[[3]] |>
  rename(primarysource = term)

print_tibble_with_title <- function(tbl, title) {
  cat(title, "\n")
  print(tbl)
}

print_tibble_with_title(who_reports_animal, paste0("<Who reports> Contingency Table: Primary Sources of Adverse Events Report from ", start_date, " to ", end_date, " queried from openFDA <animalandveterinary> endpoint."))

```

### openFDA API "drug" endpoint

Below is the "Who reports" contingency table from 2022-01-01 to 2023-01-01 queried from openFDA API "drug" endpoint. The meanings of the values of variable term in the original output: 1 represents "Physician", 2 represents "Pharmacist", 3 represents "Other health professional", 4 represents "Lawyer", 5 represents "Consumer or non-health". I replaced these number values with their corresponding meanings in the final contingency table and added a title corresponding to the queried date range. 

```{r}

start_date <- 20220101  
end_date <- 20230101 
who_reports_drug <- endpoint_API_query("drug",2,start_date,end_date)

who_reports_drug <- who_reports_drug[[3]] |>
  mutate(primarysource = as.character(term)) |>
  mutate(primarysource = case_when(
    term == 1 ~ "Physician",
    term == 2 ~ "Pharmacist",
    term == 3 ~ "Other health professional",
    term == 4 ~ "Lawyer",
    term == 5 ~ "Consumer or non-health",
    TRUE ~ as.character(primarysource)
  )) |>
  select(primarysource, count)

print_tibble_with_title(who_reports_drug, paste0("<Who reports> Contingency Table: Primary Sources of Adverse Events Report from ", start_date, " to ", end_date, " queried from openFDA <drug> endpoint."))

```

## "Type of Report" numerical summaries

This is the "Type of Report" numerical summaries for percentages of the types of adverse events across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint.

```{r}

for(i in 2013:2022){
  
  start_date <- as.numeric(paste0(i, "0101"))
  end_date <- as.numeric(paste0(i, "1231"))
  type_of_report_animal <- endpoint_API_query("animalandveterinary",3,start_date,end_date)
  
  type_of_report_animal <- type_of_report_animal[[3]] |>
    rename(reaction = term) |>
    mutate(percentage = count / sum(count) * 100) |>
    select(reaction, percentage, count)
  
  assign(paste0("type_of_report_animal_", i), type_of_report_animal)

}

data_frames <- mget(paste0("type_of_report_animal_", 2013:2022))

type_of_report_animal_2013_to_2022 <- bind_rows(data_frames, .id = "source_year") 

type_of_report_animal_2013_to_2022_stat <- type_of_report_animal_2013_to_2022 |>
  group_by(reaction) |>
  summarize(
    across(percentage, .fns = list(
      "mean_percentage" = mean,
      "median_percentage" = median,
      "var_percentage" = var,
      "sd_percentage" = sd,
      "IQR_percentage" = IQR
      ), .names = "{.fn}_{.col}"))

start_date <- 20130101
end_date <- 20221231
name <- paste0("Summary statistics for percentage of types of adverse events from ", start_date, " to ", end_date, " queried from openFDA <animalandveterinary> endpoint." )

knitr::kable(type_of_report_animal_2013_to_2022_stat, 
             caption= name,
             digits=2)

```

## "Outcomes" numerical summaries

This is the "Outcomes" numerical summaries for percentages of medical status outcomes across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint.

```{r}

for(i in 2013:2022){
  
  start_date <- as.numeric(paste0(i, "0101"))
  end_date <- as.numeric(paste0(i, "1231"))
  outcomes_animal <- endpoint_API_query("animalandveterinary",6,start_date,end_date)
  
  outcomes_animal <- outcomes_animal[[3]] |>
    rename(medical.status.outcome = term) |>
    mutate(percentage = count / sum(count) * 100) |>
    select(medical.status.outcome, percentage, count)
  
  assign(paste0("outcomes_animal_", i), outcomes_animal)

}

data_frames <- mget(paste0("outcomes_animal_", 2013:2022))

outcomes_animal_2013_to_2022 <- bind_rows(data_frames, .id = "source_year")

outcomes_animal_2013_to_2022_stat <- outcomes_animal_2013_to_2022 |>
  group_by(medical.status.outcome) |>
  summarize(
    across(percentage, .fns = list(
      "mean_percentage" = mean,
      "median_percentage" = median,
      "var_percentage" = var,
      "sd_percentage" = sd,
      "IQR_percentage" = IQR
      ), .names = "{.fn}_{.col}"))

start_date <- 20130101
end_date <- 20221231
name <- paste0("Summary statistics for percentage by medical status outcome from ", start_date, " to ", end_date, " queried from openFDA <animalandveterinary> endpoint." )

knitr::kable(outcomes_animal_2013_to_2022_stat, 
             caption= name,
             digits=2)

```

# Plots

## Plot 1

reports over time

```{r}

for(i in 2000:2020){
  
  start_date <- as.numeric(paste0(i, "0101"))
  end_date <- as.numeric(paste0(i, "1231"))
  reports_over_time_animal <- endpoint_API_query("animalandveterinary",1,start_date,end_date)
  
  reports_over_time_animal_stat <- reports_over_time_animal[[3]] |>
    summarize(count = sum(count)) |>
    mutate(year = i) |>
    select(year, count)
  
  assign(paste0("reports_over_time_animal_stat_", i), reports_over_time_animal_stat)

}

data_frames <- mget(paste0("reports_over_time_animal_stat_", 2000:2020))

reports_over_time_animal_1990_to_2020 <- bind_rows(data_frames, .id = "source_year") |>
  mutate(year = as.character(year))

plot1 <- ggplot(reports_over_time_animal_1990_to_2020, 
                aes(year,
                    count)) +
  # Add the box plot layer.
  # Jitter the points to add a little more info to the boxplot.
  geom_point(color = "blue") + 
  labs(x = "Year", y = "Counts") +
  # Add a title.
  ggtitle("Plot 1: Counts of Received Adverse events Reports from 2000 to 2020") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  

plot1 <- plotly::ggplotly(plot1, tooltip = c("year", "count"), dynamicTicks = TRUE, hoverinfo = "y")

# Display the plot.
plot1

```

## Plot 2

Who reports

```{r}

start_date <- 20100101  
end_date <- 20200101
who_reports_animal <- endpoint_API_query("animalandveterinary",2,start_date,end_date)

who_reports_animal <- who_reports_animal[[3]] |>
  rename(primarysource = term) |>
  mutate(percentage = count / sum(count) * 100) |>
  select(primarysource, percentage, count)

library(plotly)

plot2 <- plotly::plot_ly(who_reports_animal, labels = ~primarysource, values = ~count, type = 'pie',
                textinfo = 'label+percent+value', 
                hoverinfo = 'text',
                text = ~paste(primarysource, "<br>", "Count: ", count, "<br>", "Percentage: ", round(percentage, 2), "%"),
                marker = list(line = list(color = 'black', width = 1))) |>
  layout(title = "Plot 2: Primary Sources of Adverse Events Report from 20100101 to 20200101")

# Display the plot.
plot2

```

## Plot 3

Based on the "Type of Report" numerical summaries for percentages of the types of adverse events across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint, the distributions of percentages seem very different among different types of reports. Let’s visualize the distributions with boxplot.

```{r}

plot3 <- ggplot(type_of_report_animal_2013_to_2022, 
                aes(reaction,
                    percentage,
                    color=reaction)) +
  # Add the box plot layer.
  geom_boxplot() + 
  # Jitter the points to add a little more info to the boxplot.
  geom_jitter() + 
  # Add labels to the axes.
  scale_x_discrete(name = "Reaction", labels = LETTERS[1:11]) + 
  scale_y_continuous("Percentage") +
  # Add a title.
  ggtitle("Plot 3: Percentage of Types of Adverse Events from 20130101 to 20221231") + 
  # Remove the legend because it isn't needed.
  theme(legend.position = "right",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 7)) +
  scale_color_discrete("Reaction")

# Display the plot.
plot3

```

## Plot 4

Based on the "Outcomes" numerical summaries for percentages of medical status outcomes across 10 years (2013-2022) queried from openFDA API "animalandveterinary" endpoint, the distributions of percentage seem very different among different outcomes. Let’s visualize the distributions with dotplot.

```{r}

plot4 <- ggplot(outcomes_animal_2013_to_2022, 
                aes(medical.status.outcome,
                    percentage,
                    color=medical.status.outcome)) +
  # Add the box plot layer.
  geom_dotplot(binaxis = "y", stackdir = "center") + 
  # Jitter the points to add a little more info to the boxplot.
  geom_jitter() + 
  # Add labels to the axes.
  scale_x_discrete(name = "Medical Status Outcome", labels = LETTERS[1:6]) + 
  scale_y_continuous("Percentage") +
  # Add a title.
  ggtitle("Plot 4: Percentage of Medical Status Outcomes after Treatment from 20130101 to 20221231") + 
  # Remove the legend because it isn't needed.
  theme(legend.position = "right",
        legend.text = element_text(size = 6),
        legend.title = element_text(size = 7)) +
  scale_color_discrete("Outcomes")

# Display the plot.
plot4

```

