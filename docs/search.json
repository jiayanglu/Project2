[
  {
    "objectID": "Project_2.html",
    "href": "Project_2.html",
    "title": "Project2",
    "section": "",
    "text": "#shiny::runGitHub(\"jiayanglu/Project2\")\nInstall packages needed in the following code chunks.\n#options(repos = \"https://cloud.r-project.org\")\n\n#install.packages(c(\"shiny\", \"tidyverse\", \"jsonlite\", \"ggplot2\", \"plotly\"))\n\nlibrary(shiny)\n\nWarning: package 'shiny' was built under R version 4.3.3\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nThe following object is masked from 'package:shiny':\n\n    validate\n\nlibrary(ggplot2)\nlibrary(plotly)\n\nWarning: package 'plotly' was built under R version 4.3.3\n\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout"
  },
  {
    "objectID": "Project_2.html#reports-over-time",
    "href": "Project_2.html#reports-over-time",
    "title": "Project2",
    "section": "Reports over time",
    "text": "Reports over time\nThis is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including adverse reactions, product use errors, and product/manufacturing problems, within a date range in the openFDA API endpoint for the animal drug adverse event reports.\n\nanimal_API_reports_over_time &lt;- function(start_date, end_date){\n  #construct URL\n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"animalandveterinary/event.json\"\n  query_reports_over_time &lt;- \"?count=original_receive_date\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_reports_over_time)\n  #read in data\n  output_API &lt;- fromJSON(full_URL)\n  reports_over_time_data &lt;- as_tibble(output_API$results)\n  #find the date boundaries from quried data\n  earliest_date &lt;- min(ymd(reports_over_time_data$time))\n  latest_date &lt;- max(ymd(reports_over_time_data$time))\n  #define a boundry that user can query\n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n    \n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n    \n  } else {\n    #construct URL according to input dates\n    query_receivedate &lt;- \"?search=original_receive_date:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=original_receive_date\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    reports_over_time_data &lt;- as_tibble(output_API$results)\n    \n    reports_over_time_data &lt;- reports_over_time_data |&gt;\n      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |&gt;\n      select(receivedate_ymd, count) |&gt;\n      filter(receivedate_ymd &gt;= ymd(start_date) & receivedate_ymd &lt;= ymd(end_date))\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, reports_over_time_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n  }\n}  \n\n#animal_API_reports_over_time(20150101,20221231)"
  },
  {
    "objectID": "Project_2.html#who-reports",
    "href": "Project_2.html#who-reports",
    "title": "Project2",
    "section": "Who reports",
    "text": "Who reports\nThis is a query about primary reporter who holds or provides the most pertinent information related to the adverse event report within a date range in the openFDA API endpoint for the animal drug adverse event reports.\n\n#same logic from the first code chunk\nanimal_API_who_reports &lt;- function(start_date, end_date){\n  \n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"animalandveterinary/event.json\"\n  query_who_reports &lt;- \"?count=original_receive_date\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_who_reports)\n\n  output_API &lt;- fromJSON(full_URL)\n  who_reports_data &lt;- as_tibble(output_API$results)\n\n  earliest_date &lt;- min(ymd(who_reports_data$time))\n  latest_date &lt;- max(ymd(who_reports_data$time))\n  \n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n\n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n\n  } else {\n    \n    query_receivedate &lt;- \"?search=original_receive_date:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=primary_reporter.exact\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    who_reports_data &lt;- as_tibble(output_API$results)\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, who_reports_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n    \n  }\n}  \n\n#animal_API_who_reports(20150101, 20221231)"
  },
  {
    "objectID": "Project_2.html#types-of-report",
    "href": "Project_2.html#types-of-report",
    "title": "Project2",
    "section": "Types of report",
    "text": "Types of report\nThis is a query about the types of adverse events in the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.\n\n#same logic from the first code chunk\nanimal_API_types_of_reports &lt;- function(start_date, end_date){\n  \n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"animalandveterinary/event.json\"\n  query_types_of_reports &lt;- \"?count=original_receive_date\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_types_of_reports)\n\n  output_API &lt;- fromJSON(full_URL)\n  types_of_reports_data &lt;- as_tibble(output_API$results)\n\n  earliest_date &lt;- min(ymd(types_of_reports_data$time))\n  latest_date &lt;- max(ymd(types_of_reports_data$time))\n  \n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n\n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n\n  } else {\n    \n    query_receivedate &lt;- \"?search=original_receive_date:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=type_of_information.exact\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    types_of_reports_data &lt;- as_tibble(output_API$results)\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, types_of_reports_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n\n  }\n}  \n\n#animal_API_types_of_reports(20150101, 20221231)"
  },
  {
    "objectID": "Project_2.html#animal-breeds",
    "href": "Project_2.html#animal-breeds",
    "title": "Project2",
    "section": "Animal breeds",
    "text": "Animal breeds\nThis is a query about animal breeds in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.\n\n#same logic from the first code chunk\nanimal_API_animal_breeds &lt;- function(start_date, end_date){\n  \n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"animalandveterinary/event.json\"\n  query_animal_breeds &lt;- \"?count=original_receive_date\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_animal_breeds)\n\n  output_API &lt;- fromJSON(full_URL)\n  animal_breeds_data &lt;- as_tibble(output_API$results)\n\n  earliest_date &lt;- min(ymd(animal_breeds_data$time))\n  latest_date &lt;- max(ymd(animal_breeds_data$time))\n  \n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n\n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n\n  } else {\n    \n    query_receivedate &lt;- \"?search=original_receive_date:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=animal.breed.breed_component.exact\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    animal_breeds_data &lt;- as_tibble(output_API$results)\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, animal_breeds_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n\n  }\n}  \n\n#animal_API_animal_breeds(20150101, 20221231)"
  },
  {
    "objectID": "Project_2.html#reactions",
    "href": "Project_2.html#reactions",
    "title": "Project2",
    "section": "Reactions",
    "text": "Reactions\nThis is a query about reactions in the adverse events report within a date range in the openFDA API endpoint for the animal drug adverse event reports.\n\n#same logic from the first code chunk\nanimal_API_reactions &lt;- function(start_date, end_date){\n  \n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"animalandveterinary/event.json\"\n  query_reactions &lt;- \"?count=original_receive_date\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_reactions)\n\n  output_API &lt;- fromJSON(full_URL)\n  reactions_data &lt;- as_tibble(output_API$results)\n\n  earliest_date &lt;- min(ymd(reactions_data$time))\n  latest_date &lt;- max(ymd(reactions_data$time))\n  \n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n\n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n\n  } else {\n    \n    query_receivedate &lt;- \"?search=original_receive_date:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=reaction.veddra_term_name.exact\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    reactions_data &lt;- as_tibble(output_API$results)\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, reactions_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n\n  }\n}  \n\n#animal_API_reactions(20150101, 20221231)"
  },
  {
    "objectID": "Project_2.html#outcomes",
    "href": "Project_2.html#outcomes",
    "title": "Project2",
    "section": "Outcomes",
    "text": "Outcomes\nThis is a query about animal’s medical status after treatment within a date range in the openFDA API endpoint for the animal drug adverse event reports.\n\n#same logic from the first code chunk\nanimal_API_outcomes &lt;- function(start_date, end_date){\n  \n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"animalandveterinary/event.json\"\n  query_outcomes &lt;- \"?count=original_receive_date\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_outcomes)\n\n  output_API &lt;- fromJSON(full_URL)\n  outcomes_data &lt;- as_tibble(output_API$results)\n\n  earliest_date &lt;- min(ymd(outcomes_data$time))\n  latest_date &lt;- max(ymd(outcomes_data$time))\n  \n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n\n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n\n  } else {\n    \n    query_receivedate &lt;- \"?search=original_receive_date:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=outcome.medical_status.exact\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    outcomes_data &lt;- as_tibble(output_API$results)\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, outcomes_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n\n  }\n}  \n\n#animal_API_outcomes(20150101, 20221231)"
  },
  {
    "objectID": "Project_2.html#reports-over-time-1",
    "href": "Project_2.html#reports-over-time-1",
    "title": "Project2",
    "section": "Reports over time",
    "text": "Reports over time\nThis is a query about how many reports regarding to any undesirable experience associated with the use of an animal drug, including serious drug side effects, product use errors, product quality problems, and therapeutic failures, within a date range in the openFDA API endpoint for the adverse drug events.\n\n#here, a different endpoint is queried, same logic as the first code chunk\ndrug_API_reports_over_time &lt;- function(start_date, end_date){\n  \n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"drug/event.json\"\n  query_reports_over_time &lt;- \"?count=receivedate\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_reports_over_time)\n  \n  output_API &lt;- fromJSON(full_URL)\n  reports_over_time_data &lt;- as_tibble(output_API$results)\n  \n  earliest_date &lt;- min(ymd(reports_over_time_data$time))\n  latest_date &lt;- max(ymd(reports_over_time_data$time))\n  \n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n    \n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n    \n  } else {\n    \n    query_receivedate &lt;- \"?search=receivedate:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=receivedate\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    reports_over_time_data &lt;- as_tibble(output_API$results)\n    \n    reports_over_time_data &lt;- reports_over_time_data |&gt;\n      mutate(receivedate_ymd = ymd(reports_over_time_data$time)) |&gt;\n      select(receivedate_ymd, count) |&gt;\n      filter(receivedate_ymd &gt;= ymd(start_date) & receivedate_ymd &lt;= ymd(end_date))\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, reports_over_time_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n    \n  }\n}  \n\n#drug_API_reports_over_time(20150101,20221231)"
  },
  {
    "objectID": "Project_2.html#who-reports-1",
    "href": "Project_2.html#who-reports-1",
    "title": "Project2",
    "section": "Who reports",
    "text": "Who reports\nThis is a query about category of individual who submittd the report within a date range in the openFDA API endpoint for the animal drug adverse event reports.\n\n#same logic as the previous code chunk\ndrug_API_who_reports &lt;- function(start_date, end_date){\n  \n  base_URL &lt;- \"https://api.fda.gov/\"\n  endpoint &lt;- \"drug/event.json\"\n  query_who_reports &lt;- \"?count=receivedate\"\n  full_URL &lt;- paste0(base_URL, endpoint, query_who_reports)\n  \n  output_API &lt;- fromJSON(full_URL)\n  who_reports_data &lt;- as_tibble(output_API$results)\n  \n  earliest_date &lt;- min(ymd(who_reports_data$time))\n  latest_date &lt;- max(ymd(who_reports_data$time))\n  \n  if (ymd(start_date) &lt; earliest_date | ymd(end_date) &gt; latest_date){\n    \n    message &lt;- paste0(\"ERROR: Please pass a date between \", earliest_date, \" and \", latest_date, \" in the format of YYYYMMDD\", \".\")\n    stop(message)\n    \n  } else {\n    \n    query_receivedate &lt;- \"?search=receivedate:\"\n    query_date_range &lt;- paste0(\"[\", start_date, \"+TO+\", end_date, \"]&count=primarysource.qualification\")\n    full_URL &lt;- paste0(base_URL, endpoint, query_receivedate, query_date_range)\n    \n    output_API &lt;- fromJSON(full_URL)\n    who_reports_data &lt;- as_tibble(output_API$results)\n    \n    query_name &lt;- paste0(\"query_\", start_date, \"_to_\", end_date)\n    return(setNames(list(earliest_date, latest_date, who_reports_data),\n                    c(\"earliest_date\", \"latest_date\", query_name)))\n    \n  }\n}  \n\n# 1: Physician; 2: Pharmacist; 3: Other health professional; 4: Lawyer; 5: Consumer or non-health professional\n\n#drug_API_who_reports(20150101, 20221231)"
  },
  {
    "objectID": "Project_2.html#contingency-tables-for-who-reports-queries",
    "href": "Project_2.html#contingency-tables-for-who-reports-queries",
    "title": "Project2",
    "section": "Contingency tables for “Who reports” queries",
    "text": "Contingency tables for “Who reports” queries\n\nfrom openFDA API “animalandveterinary” endpoint\nBelow is the “Who reports” contingency table from 2022-01-01 to 2023-01-01 queried from openFDA API “animalandveterinary” endpoint.\n\nfun_contingency_table1 &lt;- function(start_date, end_date){\n  #data query\n  who_reports_animal &lt;- endpoint_API_query(\"animalandveterinary\",2,start_date,end_date)\n  \n  who_reports_animal &lt;- who_reports_animal[[3]] |&gt;\n    rename(primarysource = term)\n  #create a function to include a title\n  print_tibble_with_title &lt;- function(tbl, title) {\n    cat(title, \"\\n\")\n    print(tbl)\n  }\n  #print a contigency table with a title\n  print_tibble_with_title(who_reports_animal, paste0(\"&lt;Who reports&gt; Contingency Table: Primary Sources of Adverse Events Report from \", start_date, \" to \", end_date, \" queried from openFDA &lt;animalandveterinary&gt; endpoint.\"))\n  \n}\n\n#this is an example of how to use this function to create a contingency table\n\nstart_date &lt;- 20150101  \nend_date &lt;- 20221231\n\nfun_contingency_table1(start_date, end_date)\n\n&lt;Who reports&gt; Contingency Table: Primary Sources of Adverse Events Report from 20150101 to 20221231 queried from openFDA &lt;animalandveterinary&gt; endpoint. \n# A tibble: 7 × 2\n  primarysource                   count\n  &lt;chr&gt;                           &lt;int&gt;\n1 Animal Owner                   191807\n2 Other                          137748\n3 Veterinarian                   129324\n4 Other Health Care Professional  93942\n5 Patient                          1662\n6 Unknown                           552\n7 Physician                          59\n\n\n\n\nfrom openFDA API “drug” endpoint\nBelow is the “Who reports” contingency table from 2022-01-01 to 2023-01-01 queried from openFDA API “drug” endpoint. The meanings of the values of variable term in the original output: 1 represents “Physician”, 2 represents “Pharmacist”, 3 represents “Other health professional”, 4 represents “Lawyer”, 5 represents “Consumer or non-health”. I replaced these number values with their corresponding meanings in the final contingency table and added a title corresponding to the queried date range.\n\nfun_contingency_table2 &lt;- function(start_date,end_date){\n  #data query\n  who_reports_drug &lt;- endpoint_API_query(\"drug\",2,start_date,end_date)\n  #define variable term\n  who_reports_drug &lt;- who_reports_drug[[3]] |&gt;\n    mutate(primarysource = as.character(term)) |&gt;\n    mutate(primarysource = case_when(\n      term == 1 ~ \"Physician\",\n      term == 2 ~ \"Pharmacist\",\n      term == 3 ~ \"Other health professional\",\n      term == 4 ~ \"Lawyer\",\n      term == 5 ~ \"Consumer or non-health\",\n      TRUE ~ as.character(primarysource)\n    )) |&gt;\n    select(primarysource, count)\n  \n  print_tibble_with_title &lt;- function(tbl, title) {\n    cat(title, \"\\n\")\n    print(tbl)\n  }\n  \n  print_tibble_with_title(who_reports_drug, paste0(\"&lt;Who reports&gt; Contingency Table: Primary Sources of Adverse Events Report from \", start_date, \" to \", end_date, \" queried from openFDA &lt;drug&gt; endpoint.\"))\n  \n}\n\n#this is an example of how to use this function to create a contingency table\n\nstart_date &lt;- 20150101  \nend_date &lt;- 20221231 \n\nfun_contingency_table2(start_date, end_date)\n\n&lt;Who reports&gt; Contingency Table: Primary Sources of Adverse Events Report from 20150101 to 20221231 queried from openFDA &lt;drug&gt; endpoint. \n# A tibble: 5 × 2\n  primarysource               count\n  &lt;chr&gt;                       &lt;int&gt;\n1 Consumer or non-health    5132197\n2 Physician                 2348271\n3 Other health professional 2139693\n4 Pharmacist                 769378\n5 Lawyer                     393284"
  },
  {
    "objectID": "Project_2.html#numerical-summaries",
    "href": "Project_2.html#numerical-summaries",
    "title": "Project2",
    "section": "Numerical summaries",
    "text": "Numerical summaries\n\nfor “Type of Report” queries\nThis is the “Type of Report” numerical summaries for percentages of the types of adverse events across 10 years (2013-2022) queried from openFDA API “animalandveterinary” endpoint.\n\nfun_summary1 &lt;- function(start_date, end_date){\n  \n  start_year &lt;- substr(start_date, 1, 4)\n  end_year &lt;- substr(end_date, 1, 4)\n  #cycle through all years from input and calculate relative percentages from each year \n  for(i in start_year:end_year){\n    \n    start_date2 &lt;- as.numeric(paste0(i, \"0101\"))\n    end_date2 &lt;- as.numeric(paste0(i, \"1231\"))\n    \n    type_of_report_animal &lt;- endpoint_API_query(\"animalandveterinary\",3,start_date2,end_date2)\n    \n    type_of_report_animal &lt;- type_of_report_animal[[3]] |&gt;\n      rename(reaction = term) |&gt;\n      mutate(percentage = count / sum(count) * 100) |&gt;\n      select(reaction, percentage, count)\n    \n    assign(paste0(\"type_of_report_animal_\", i), type_of_report_animal)\n    \n  }\n  #combine data from all years together\n  data_frames &lt;- mget(paste0(\"type_of_report_animal_\", start_year:end_year))\n  \n  type_of_report_animal_year_range &lt;- bind_rows(data_frames, .id = \"source_year\") \n  #calculate numerical summaries for percentages for all years\n  type_of_report_animal_year_range_stat &lt;- type_of_report_animal_year_range |&gt;\n    group_by(reaction) |&gt;\n    summarize(\n      across(percentage, .fns = list(\n        \"mean\" = mean,\n        \"median\" = median,\n        \"var\" = var,\n        \"sd\" = sd,\n        \"IQR\" = IQR\n      ), .names = \"{.fn}_{.col}\"))\n  \n  title &lt;- paste0(\"Summary statistics for percentage of types of adverse events from \", start_date, \" to \", end_date, \" queried from openFDA &lt;animalandveterinary&gt; endpoint.\" )\n\n  print_tibble_with_title &lt;- function(tbl, title) {\n    cat(title, \"\\n\")\n    print(tbl)\n  }\n\n  print_tibble_with_title(type_of_report_animal_year_range_stat, title)\n\n}\n\n#this is an example of how to use this function to generate numerical summaries of percentages\n\nstart_date &lt;- 20150101  \nend_date &lt;- 20221231\n\nfun_summary1(start_date, end_date)\n\nSummary statistics for percentage of types of adverse events from 20150101 to 20221231 queried from openFDA &lt;animalandveterinary&gt; endpoint. \n# A tibble: 11 × 6\n   reaction       mean_percentage median_percentage var_percentage sd_percentage\n   &lt;chr&gt;                    &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n 1 Both Safety A…         0.00141           0.00141       3.26e-12    0.00000180\n 2 Both Safety A…         5.56              5.71          2.30e+ 0    1.52      \n 3 Lack Of Expec…        26.5              25.8           1.01e+ 1    3.18      \n 4 Lack Of Expec…         0.00138           0.00138       1.31e- 9    0.0000363 \n 5 Manufacturing…         0.121             0.148         4.41e- 3    0.0664    \n 6 Manufacturing…         0.333             0.286         2.13e- 2    0.146     \n 7 Manufacturing…         1.41              1.44          2.55e- 1    0.505     \n 8 Manufacturing…        11.4              11.1           1.38e+ 0    1.18      \n 9 Other                  0.0270            0.0293        1.52e- 4    0.0123    \n10 Safety Issue          54.6              54.1           1.75e+ 1    4.19      \n11 Safety Issue …         0.0153            0.0166        9.34e- 5    0.00967   \n# ℹ 1 more variable: IQR_percentage &lt;dbl&gt;\n\n\n\n\nfor “Outcomes” queries\nThis is the “Outcomes” numerical summaries for percentages of medical status outcomes across 10 years (2013-2022) queried from openFDA API “animalandveterinary” endpoint.\n\nfun_summary2 &lt;- function(start_date, end_date){\n  \n  start_year &lt;- substr(start_date, 1, 4)\n  end_year &lt;- substr(end_date, 1, 4)\n    #cycle through all years from input and calculate relative percentages from each year \n  for(i in start_year:end_year){\n    \n    start_date2 &lt;- as.numeric(paste0(i, \"0101\"))\n    end_date2 &lt;- as.numeric(paste0(i, \"1231\"))\n    outcomes_animal &lt;- endpoint_API_query(\"animalandveterinary\",6,start_date2,end_date2)\n    \n    outcomes_animal &lt;- outcomes_animal[[3]] |&gt;\n      rename(medical.status.outcome = term) |&gt;\n      mutate(percentage = count / sum(count) * 100) |&gt;\n      select(medical.status.outcome, percentage, count)\n    \n    assign(paste0(\"outcomes_animal_\", i), outcomes_animal)\n    \n  }\n  #combine data from all years together\n  data_frames &lt;- mget(paste0(\"outcomes_animal_\", start_year:end_year))\n  \n  outcomes_animal_year_range &lt;- bind_rows(data_frames, .id = \"source_year\")\n  #calculate numerical summaries for percentages for all years\n  outcomes_animal_year_range_stat &lt;- outcomes_animal_year_range |&gt;\n    group_by(medical.status.outcome) |&gt;\n    summarize(\n      across(percentage, .fns = list(\n        \"mean\" = mean,\n        \"median\" = median,\n        \"var\" = var,\n        \"sd\" = sd,\n        \"IQR\" = IQR\n      ), .names = \"{.fn}_{.col}\"))\n  \n  title &lt;- paste0(\"Summary statistics for percentage by medical status outcome from \", start_date, \" to \", end_date, \" queried from openFDA &lt;animalandveterinary&gt; endpoint.\" )\n\n  print_tibble_with_title &lt;- function(tbl, title) {\n    cat(title, \"\\n\")\n    print(tbl)\n  }\n\n  print_tibble_with_title(outcomes_animal_year_range_stat, title)\n  \n}\n\n#this is an example of how to use this function to generate numerical summaries of percentages\n\nstart_date &lt;- 20150101  \nend_date &lt;- 20221231\n\nfun_summary2(start_date, end_date)\n\nSummary statistics for percentage by medical status outcome from 20150101 to 20221231 queried from openFDA &lt;animalandveterinary&gt; endpoint. \n# A tibble: 6 × 6\n  medical.status.outcome mean_percentage median_percentage var_percentage\n  &lt;chr&gt;                            &lt;dbl&gt;             &lt;dbl&gt;          &lt;dbl&gt;\n1 Died                              3.23              3.23         0.0492\n2 Euthanized                        1.97              1.96         0.0136\n3 Ongoing                          25.2              24.2         67.8   \n4 Outcome Unknown                  37.2              37.4          4.57  \n5 Recovered with Sequela            3.31              3.73         2.80  \n6 Recovered/Normal                 29.1              28.5         32.4   \n# ℹ 2 more variables: sd_percentage &lt;dbl&gt;, IQR_percentage &lt;dbl&gt;"
  },
  {
    "objectID": "Project_2.html#plot-1",
    "href": "Project_2.html#plot-1",
    "title": "Project2",
    "section": "Plot 1",
    "text": "Plot 1\nBased on the “Reports over time” query for how many adverse reports regarding to any undesirable experience associated with the use of an animal drug, including adverse reactions, product use errors, and product/manufacturing problems, across 8 years (2015-2022) in the openFDA API endpoint for the animal drug adverse event reports, we can visualize it with bar plot. User can also select a specific year within 2015-2022, and then visualize the counts by each month with bar plot.\n\nfun_plot1_1 &lt;- function(endpoint, start_date, end_date){\n  #query data from the general query function\n  reports_over_time_animal  &lt;- endpoint_API_query(endpoint,1,start_date,end_date)[[3]] \n  #calculate summary counts by each year\n  reports_over_time_animal_year  &lt;- reports_over_time_animal |&gt;\n    group_by(year = lubridate::year(receivedate_ymd)) |&gt;\n    summarise(count = sum(count)) |&gt;\n    mutate(year = as.character(year))\n  \n  reports_over_time_animal_month &lt;- reports_over_time_animal |&gt;\n    group_by(year = year(receivedate_ymd), month = month(receivedate_ymd, label = TRUE)) |&gt; \n    summarise(count = sum(count)) \n  \n  reports_over_time_animal_plot &lt;- reports_over_time_animal_month |&gt;\n    mutate(year = as.character(year))\n  #create a bar plot using the data above\n  plot1_1 &lt;- ggplot(reports_over_time_animal_year, aes(year, count)) +\n    geom_bar(stat = \"identity\", fill = \"skyblue\", width = 0.5) + \n    labs(x = \"Year\", y = \"Counts\") +\n    ggtitle(paste0(\"Counts of Received Adverse events Reports from \", start_date, \" to \", end_date, \".\")) +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n  return(plot1_1)\n}\n\n#example of using this function\nendpoint &lt;- \"drug\"\nstart_date &lt;- 20150101\nend_date &lt;- 20221231\n\nfun_plot1_1(endpoint, start_date, end_date)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n#create another function to further calculate summary counts from each month\nfun_plot1_2 &lt;- function(endpoint, start_date, end_date, input_year){\n  \n  reports_over_time_animal  &lt;- endpoint_API_query(endpoint,1,start_date,end_date)[[3]] \n  #calculate summary counts by each month\n  reports_over_time_animal_year  &lt;- reports_over_time_animal |&gt;\n    group_by(year = lubridate::year(receivedate_ymd)) |&gt;\n    summarise(count = sum(count)) |&gt;\n    mutate(year = as.character(year))\n  \n  reports_over_time_animal_month &lt;- reports_over_time_animal |&gt;\n    group_by(year = year(receivedate_ymd), month = month(receivedate_ymd, label = TRUE)) |&gt; \n    summarise(count = sum(count))\n  \n  reports_over_time_animal_stat &lt;- reports_over_time_animal_month |&gt;\n    filter(year == input_year) |&gt;\n    mutate(year = as.character(year))\n  #create a bar plot using the data above\n  plot1_2 &lt;- ggplot(reports_over_time_animal_stat, aes(month, count)) +\n    geom_bar(stat = \"identity\", position = \"dodge\", fill = \"skyblue\") + \n    labs(x = \"Month\", y = \"Counts\") +\n    ggtitle(paste0(\"Counts of Received Adverse events Reports \", \"in \", input_year, \".\")) +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n  plot1_2\n  \n}\n\n#example of using this function\n\nendpoint &lt;- \"animalandveterinary\"\nstart_date &lt;- 20150101\nend_date &lt;- 20221231\ninput_year &lt;- 2019\n\nfun_plot1_2(endpoint, start_date, end_date, input_year)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "Project_2.html#plot-2",
    "href": "Project_2.html#plot-2",
    "title": "Project2",
    "section": "Plot 2",
    "text": "Plot 2\nBased on the “Who reports” query for primary reporter who holds or provides the most pertinent information related to the adverse event report across 8 years (2015-2022) in the openFDA API endpoint for the animal drug adverse event reports, we can visualize the percentages and the counts from each category with an interactive pie chart.\n\nfun_plot2 &lt;- function(endpoint, start_date, end_date){\n  if (endpoint == \"animalandveterinary\"){\n    #query data from the general query function and calculate percentages by each category\n    who_reports &lt;- endpoint_API_query(\"animalandveterinary\",2,start_date,end_date)[[3]] |&gt;\n      rename(primarysource = term) |&gt;\n      mutate(percentage = count / sum(count) * 100) |&gt;\n      select(primarysource, percentage, count)\n    \n  } else if (endpoint == \"drug\"){\n    #query data from another endpoint\n    who_reports &lt;- endpoint_API_query(\"drug\",2,start_date,end_date)[[3]] |&gt;\n      mutate(primarysource = as.character(term)) |&gt;\n      mutate(primarysource = case_when(\n        term == 1 ~ \"Physician\",\n        term == 2 ~ \"Pharmacist\",\n        term == 3 ~ \"Other health professional\",\n        term == 4 ~ \"Lawyer\",\n        term == 5 ~ \"Consumer or non-health\",\n        TRUE ~ as.character(primarysource)\n      )) |&gt;\n      select(primarysource, count) |&gt;\n      mutate(percentage = count / sum(count) * 100) |&gt;\n      select(primarysource, percentage, count)\n  }\n  #create an interactive plot using plotly::plot_ly to see percentages and counts from each category\n  plot2 &lt;- plotly::plot_ly(who_reports, labels = ~primarysource, values = ~count, type = 'pie',\n                           textinfo = 'label+percent+value',\n                           hoverinfo = 'text',\n                           text = ~paste(primarysource, \"&lt;br&gt;\", \"Count: \", count, \"&lt;br&gt;\", \"Percentage: \", round(percentage, 2), \"%\"),\n                           \n                           textfont = list(size = 8)) |&gt;\n    plotly::layout(title = list(text = paste0(\"Primary Sources of Adverse Events Report from \", start_date, \" to \", end_date),\n                        font = list(size = 12)))\n  \n  # Display the plot.\n  return(list(data = who_reports, plot = plot2))\n}\n\n#example of using this function\n\nendpoint &lt;- \"drug\"\nstart_date &lt;- 20150101  \nend_date &lt;- 20221231\n\nfun_plot2(endpoint, start_date, end_date)$plot"
  },
  {
    "objectID": "Project_2.html#plot-3",
    "href": "Project_2.html#plot-3",
    "title": "Project2",
    "section": "Plot 3",
    "text": "Plot 3\nBased on the “Type of Report” numerical summaries for percentages of the types of adverse events across 10 years (2013-2022) queried from openFDA API “animalandveterinary” endpoint, the distributions of percentages seem very different among different types of reports. Let’s visualize the distributions with boxplot.\n\nfun_plot3 &lt;- function(endpoint, start_date, end_date){\n  \n  start_year &lt;- substr(start_date, 1, 4)\n  end_year &lt;- substr(end_date, 1, 4)\n  #cycle through the input years and calculate percentages for each category\n  for(i in start_year:end_year){\n    \n    start_date2 &lt;- as.numeric(paste0(i, \"0101\"))\n    end_date2 &lt;- as.numeric(paste0(i, \"1231\"))\n    #query data\n    type_of_report_animal &lt;- endpoint_API_query(endpoint,3,start_date2,end_date2)\n\n    type_of_report_animal &lt;- type_of_report_animal[[3]] |&gt;\n      rename(reaction = term) |&gt;\n      mutate(percentage = count / sum(count) * 100) |&gt;\n      select(reaction, percentage, count)\n    \n    assign(paste0(\"type_of_report_animal_\", i), type_of_report_animal)\n    \n  }\n  \n  data_frames &lt;- mget(paste0(\"type_of_report_animal_\", start_year:end_year))\n  type_of_report_animal_year_range &lt;- bind_rows(data_frames, .id = \"source_year\") \n  #create a boxplot\n  plot3 &lt;- ggplot(type_of_report_animal_year_range, \n                  aes(reaction,\n                      percentage,\n                      color=reaction)) +\n    geom_boxplot() + \n    # jitter the points to add a little more info to the boxplot.\n    geom_jitter() + \n    # add labels to the axes.\n    scale_x_discrete(name = \"Reaction\", labels = LETTERS[1:11]) + \n    scale_y_continuous(\"Percentage%\") +\n    scale_color_discrete(\"Reaction\") +\n    # add a title\n    ggtitle(paste0(\"Percentage of Types of Adverse Events from \", start_date, \" to \", end_date)) +\n    # remove the legend because it isn't needed.\n    theme(legend.position = \"right\",\n          legend.text = element_text(size = 7),\n          legend.title = element_text(size = 8),\n          plot.title = element_text(size = 11),\n          axis.text.x = element_text(size = 8),\n          axis.text.y = element_text(size = 8)) \n  \n  plot3\n  \n}\n\n#example of using this function\n\nendpoint &lt;- \"animalandveterinary\"\nstart_date &lt;- 20150101  \nend_date &lt;- 20221231\n\nfun_plot3(endpoint, start_date, end_date)"
  },
  {
    "objectID": "Project_2.html#plot-4",
    "href": "Project_2.html#plot-4",
    "title": "Project2",
    "section": "Plot 4",
    "text": "Plot 4\nBased on the “Outcomes” numerical summaries for percentages of medical status outcomes across 10 years (2013-2022) queried from openFDA API “animalandveterinary” endpoint, the distributions of percentage seem very different among different outcomes. Let’s visualize the distributions with dot plot.\n\nfun_plot4 &lt;- function(endpoint, start_date, end_date){\n  \n  start_year &lt;- substr(start_date, 1, 4)\n  end_year &lt;- substr(end_date, 1, 4)\n  #cycle through the input years and calculate percentages for each category\n  for(i in start_year:end_year){\n    \n    start_date2 &lt;- as.numeric(paste0(i, \"0101\"))\n    end_date2 &lt;- as.numeric(paste0(i, \"1231\"))\n    outcomes_animal &lt;- endpoint_API_query(endpoint,6,start_date2,end_date2)\n    \n    outcomes_animal &lt;- outcomes_animal[[3]] |&gt;\n      rename(medical.status.outcome = term) |&gt;\n      mutate(percentage = count / sum(count) * 100) |&gt;\n      select(medical.status.outcome, percentage, count)\n    \n    assign(paste0(\"outcomes_animal_\", i), outcomes_animal)\n    \n  }\n  \n  data_frames &lt;- mget(paste0(\"outcomes_animal_\", start_year:end_year))\n  outcomes_animal_year_range &lt;- bind_rows(data_frames, .id = \"source_year\")\n  #create a dotplot\n  plot4 &lt;- ggplot(outcomes_animal_year_range, \n                  aes(medical.status.outcome,\n                      percentage,\n                      color=medical.status.outcome\n                  )) +\n    geom_dotplot(binaxis = \"y\", stackdir = \"center\", binwidth = 1.5) + \n    # jitter the points to add a little more info to the boxplot.\n    geom_jitter() + \n    scale_x_discrete(name = \"Medical Status Outcome\", labels = LETTERS[1:6]) + \n    scale_y_continuous(\"Percentage%\") +\n    scale_color_discrete(\"Outcomes\") +\n    ggtitle(paste0(\"Percentage of Medical Status Outcomes after Treatment from \", start_date, \" to \", end_date)) + \n    # remove the legend because it isn't needed.\n    theme(legend.position = \"right\",\n          legend.text = element_text(size = 7),\n          legend.title = element_text(size = 8),\n          plot.title = element_text(size = 11),\n          axis.text.x = element_text(size = 8),\n          axis.text.y = element_text(size = 8)) \n  \n  plot4\n  \n}\n\n#example of using this function\nendpoint &lt;- \"animalandveterinary\"\nstart_date &lt;- 20150101  \nend_date &lt;- 20221231\n\nfun_plot4(endpoint, start_date, end_date)"
  }
]